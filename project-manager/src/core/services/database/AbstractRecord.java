package core.services.database;

import interfaces.Record;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import util.Param;
import util.Logging.Logger;
import core.services.bundle.Bundle;

public abstract class AbstractRecord<R extends Record> implements Record {
	protected Logger logger;
	private Class<R>clazz;
	private String	schema;
	private Integer	id;
	private Field[]	fields;

	protected AbstractRecord(Class<R> clazz, String schema, ResultSet rs) {
		this.logger = new Logger(clazz);
		try {
			this.schema = schema;
			this.id = rs.getInt(1);
			this.clazz = clazz;
			this.fields = clazz.getFields();
		} catch (SQLException e) {
			this.logger.error(Bundle.EXC, "couldNotInstantiateRecord");
		}
	}

	protected AbstractRecord(Class<R> clazz, String schema) {
		this.id = null;
		this.schema = schema;
		this.clazz = clazz;
		this.fields = clazz.getFields();
	}

	public boolean create() {
		try {
			Connection conn = ConnectionFactory.getConnection();
			try {
				conn.createStatement().execute("CREATE SCHEMA " + schema);
			} catch (SQLException e) {
				this.logger.error(Bundle.EXC, "SchemaNotCreated");
			}

			StringBuilder sb = new StringBuilder(256);
			sb.append("CREATE TABLE " + schema + "." + clazz.getSimpleName() + "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,");
			
			for (Field f : fields) {
				sb.append(f.getName() + " " );
				if (f.getType() == String.class) {
					sb.append("VARCHAR(");
					sb.append(f.getAnnotation(Param.class).size() + ")");
				}
				else {
					sb.append(f.getType().getSimpleName());
				}
				sb.append(", ");
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.deleteCharAt(sb.length() - 1);
			sb.append(") ");
			
			conn.createStatement().execute(sb.toString());
			return true;
		} catch (Exception e) {
			return false;
		}
	}
	public boolean insert() {
		try {
			Connection conn = ConnectionFactory.getConnection();
			StringBuilder sb = new StringBuilder(256);
			sb.append("INSERT INTO " + schema + "." + clazz.getSimpleName() + "(");

			for (Field f : fields) {
				sb.append(f.getName() + ", ");
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.deleteCharAt(sb.length() - 1);
			sb.append(") ");
			
			sb.append("VALUES(");
			for (int i = 0 ; i < fields.length ; i++) {
				sb.append("?, ");
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.deleteCharAt(sb.length() - 1);
	
			sb.append(")");
			PreparedStatement ps = conn.prepareStatement(sb.toString());
			fill(ps);
			ps.execute();

			ResultSet rs = conn.prepareStatement("CALL IDENTITY()").executeQuery();
			if (rs.next()) {
				this.id = rs.getInt(1);
				DatabaseAccess.commit();
				insertIntoTable();
				return true;
			}
			return false;

		} catch (SQLException e) {
			return false;
		}
	}

	public boolean update() {
		try {
			Connection conn = ConnectionFactory.getConnection();
			StringBuilder sb = new StringBuilder(256);
			sb.append("UPDATE " + schema + "." + clazz.getSimpleName() + " SET ");

			for (Field f : fields) {
				sb.append(f.getName() + "=?, ");
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.deleteCharAt(sb.length() - 1);

			sb.append(" WHERE ID=?");
			
			PreparedStatement ps = conn.prepareStatement(sb.toString());
			fill(ps);
			ps.setInt(fields.length + 1, id);
			ps.execute();
			return true;
		} catch (SQLException e) {
			return false;
		}
	}
	public boolean delete() {
		try {
			Connection conn = ConnectionFactory.getConnection();
			StringBuilder sb = new StringBuilder(256);
			sb.append("DELETE FROM " + schema + "." + clazz.getSimpleName() + " WHERE ID=?");

			PreparedStatement ps = conn.prepareStatement(sb.toString());
			ps.setInt(1, id);
			ps.execute();
			deleteFromTable();
			return true;
		} catch (SQLException e) {
			return false;
		}
	}

	public boolean matches(String field, String value) {
		if (field == null) {
			return true;
		}
		try {
			return clazz.getField(field).get(this).toString().equalsIgnoreCase(value);
		} catch (Exception e) {
			return false;
		}
	}
	
	protected abstract void insertIntoTable();
	protected abstract void deleteFromTable();
	protected abstract void fill(PreparedStatement ps);

	public String toString() {
		return "id=" + id;
	}
}